name: Run GHCR image on EC2 (4h)

on:
  schedule:
    - cron: "0 */2 * * *"   # every 2 hours (UTC)
  workflow_dispatch:

concurrency:
  group: ec2-run
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
      EC2_USER: ${{ secrets.EC2_USER }}
      CONTAINER_IMAGE: ${{ secrets.CONTAINER_IMAGE }}
      CONTAINER_NAME: my-python-job

    steps:
      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure EC2 is running + get host
        id: ec2
        shell: bash
        run: |
          set -euo pipefail
          STATE=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].State.Name' --output text)
          if [ "$STATE" != "running" ]; then
            aws ec2 start-instances --instance-ids "$INSTANCE_ID" >/dev/null
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
          fi
          HOST=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicDnsName' --output text)
          if [ -z "$HOST" ] || [ "$HOST" = "None" ]; then
            HOST=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
          fi
          echo "host=$HOST" >> "$GITHUB_OUTPUT"

      - name: Write SSH key
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          printf '%s' "${{ secrets.EC2_SSH_KEY }}" > key.pem
          sed -i 's/\r$//' key.pem
          chmod 600 key.pem

      - name: Build app.env
        shell: bash
        run: |
          set -euo pipefail
          umask 077
          cat > app.env <<EOF
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SAFE_ROADS_API=${{ secrets.SAFE_ROADS_API }}
          HTTP_TIMEOUT=30
          G_TOKEN=${{ secrets.G_TOKEN }}
          EOF
          # Normalize line endings to avoid Docker env-file parse issues
          sed -i 's/\r$//' app.env
          # Presence check without printing the secret
          grep -n '^G_TOKEN=' app.env >/dev/null || { echo "G_TOKEN missing in app.env"; exit 1; }

      - name: Copy app.env to EC2
        env:
          EC2_HOST: ${{ steps.ec2.outputs.host }}
        shell: bash
        run: |
          set -euo pipefail
          scp -o StrictHostKeyChecking=no -i key.pem app.env "$EC2_USER@${EC2_HOST}:~/app.env"

      - name: SSH and run container
        env:
          EC2_HOST: ${{ steps.ec2.outputs.host }}
        shell: bash
        run: |
          set -euo pipefail
          ssh -o StrictHostKeyChecking=no -i key.pem "$EC2_USER@${EC2_HOST}" bash -s <<EOF
          set -euo pipefail
          ENV_FILE="\$HOME/app.env"
          test -f "\$ENV_FILE"
          grep -n '^G_TOKEN=' "\$ENV_FILE" >/dev/null || { echo "G_TOKEN missing in env file"; exit 1; }

          sudo docker pull "${CONTAINER_IMAGE}"
          sudo docker rm -f "${CONTAINER_NAME}" >/dev/null 2>&1 || true
          sudo docker run --rm --name "${CONTAINER_NAME}" \
            --env-file "\$ENV_FILE" \
            "${CONTAINER_IMAGE}"
          EOF

      - name: Cleanup local artifacts
        if: always()
        shell: bash
        run: |
          rm -f key.pem app.env

      - name: Stop EC2 to save costs
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          aws ec2 stop-instances --instance-ids "$INSTANCE_ID" >/dev/null
          aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"
